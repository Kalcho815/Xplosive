// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Xplosive.Data;

namespace Xplosive.Migrations
{
    [DbContext(typeof(XplosiveDbContext))]
    partial class XplosiveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Xplosive.Models.DailyInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("NutritionId")
                        .HasColumnName("NUTRITION_ID")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("varchar(200)");

                    b.Property<double>("Weight")
                        .HasColumnName("WEIGHT")
                        .HasColumnType("double");

                    b.Property<string>("WorkoutId")
                        .HasColumnName("WORKOUT_ID")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DAILY_INFOS");
                });

            modelBuilder.Entity("Xplosive.Models.DailyNutrition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("DailyInfoId")
                        .HasColumnName("DAILY_INFO_ID")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Log")
                        .HasColumnName("LOG")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DailyInfoId")
                        .IsUnique();

                    b.ToTable("DAILY_NUTRITIONS");
                });

            modelBuilder.Entity("Xplosive.Models.DailyWorkout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("DailyInfoId")
                        .HasColumnName("DAILY_INFO_ID")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Log")
                        .HasColumnName("LOG")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DailyInfoId")
                        .IsUnique();

                    b.ToTable("DAILY_WORKOUTS");
                });

            modelBuilder.Entity("Xplosive.Models.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("varchar(767)");

                    b.Property<double>("Carbohydrates")
                        .HasColumnName("CARBOHYDRATES")
                        .HasColumnType("double");

                    b.Property<double>("CarbohydratesSugar")
                        .HasColumnName("CARBOHYDRATES_SUGAR")
                        .HasColumnType("double");

                    b.Property<string>("DailyNutritionId")
                        .HasColumnName("DAILY_NUTRITION_ID")
                        .HasColumnType("varchar(767)");

                    b.Property<double>("Energy")
                        .HasColumnName("ENERGY")
                        .HasColumnType("double");

                    b.Property<double>("Fat")
                        .HasColumnName("FAT")
                        .HasColumnType("double");

                    b.Property<double>("FatSaturated")
                        .HasColumnName("FAT_SATURATED")
                        .HasColumnType("double");

                    b.Property<double>("Fibres")
                        .HasColumnName("FIBRES")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("text");

                    b.Property<string>("NutritionalValue")
                        .HasColumnName("NUTRITIONAL_VALUE")
                        .HasColumnType("text");

                    b.Property<double>("Protein")
                        .HasColumnName("PROTEIN")
                        .HasColumnType("double");

                    b.Property<double>("Sodium")
                        .HasColumnName("SODIUM")
                        .HasColumnType("double");

                    b.Property<DateTime>("TimeOfDay")
                        .HasColumnName("TIME_OF_DAY")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DailyNutritionId");

                    b.ToTable("FOOD");
                });

            modelBuilder.Entity("Xplosive.Models.Set", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("DailyWorkoutId")
                        .HasColumnName("DAILY_WORKOUT_ID")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("ExerciseId")
                        .HasColumnName("EXERCISE_ID")
                        .HasColumnType("int");

                    b.Property<string>("ExerciseName")
                        .HasColumnName("EXERCISE_NAME")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnName("NUMBER")
                        .HasColumnType("int");

                    b.Property<int>("RepCount")
                        .HasColumnName("REP_COUNT")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnName("WEIGHT")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("DailyWorkoutId");

                    b.ToTable("SETS");
                });

            modelBuilder.Entity("Xplosive.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ActivityLevel")
                        .HasColumnName("ACTIVITY_LEVEL")
                        .HasColumnType("int");

                    b.Property<int>("CaloricGoal")
                        .HasColumnName("CALORIC_GOAL")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnName("DATE_OF_BIRTH")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .HasColumnName("FULL_NAME")
                        .HasColumnType("text");

                    b.Property<double>("Height")
                        .HasColumnName("HEIGHT")
                        .HasColumnType("double");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnName("WEIGHT")
                        .HasColumnType("double");

                    b.Property<double>("WeightGoal")
                        .HasColumnName("WEIGHT_GOAL")
                        .HasColumnType("double");

                    b.ToTable("USERS");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xplosive.Models.DailyInfo", b =>
                {
                    b.HasOne("Xplosive.Models.User", "User")
                        .WithMany("DailyInfos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Xplosive.Models.DailyNutrition", b =>
                {
                    b.HasOne("Xplosive.Models.DailyInfo", "DailyInfo")
                        .WithOne("Nutrition")
                        .HasForeignKey("Xplosive.Models.DailyNutrition", "DailyInfoId");
                });

            modelBuilder.Entity("Xplosive.Models.DailyWorkout", b =>
                {
                    b.HasOne("Xplosive.Models.DailyInfo", "DailyInfo")
                        .WithOne("Workout")
                        .HasForeignKey("Xplosive.Models.DailyWorkout", "DailyInfoId");
                });

            modelBuilder.Entity("Xplosive.Models.Food", b =>
                {
                    b.HasOne("Xplosive.Models.DailyNutrition", "DailyNutrition")
                        .WithMany("Foods")
                        .HasForeignKey("DailyNutritionId");
                });

            modelBuilder.Entity("Xplosive.Models.Set", b =>
                {
                    b.HasOne("Xplosive.Models.DailyWorkout", "DailyWorkout")
                        .WithMany("Sets")
                        .HasForeignKey("DailyWorkoutId");
                });
#pragma warning restore 612, 618
        }
    }
}
